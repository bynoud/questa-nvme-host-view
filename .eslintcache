[{"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\index.js":"1","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\App.js":"2","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\reportWebVitals.js":"3","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostView.js":"4","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\test\\outrage.js":"5","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostOpt.js":"6","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostList.js":"7","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostParse.js":"8","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostTable.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":194,"mtime":1608260075496,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":6009,"mtime":1608284985468,"results":"14","hashOfConfig":"11"},{"size":4322,"mtime":1607829477648,"results":"15","hashOfConfig":"11"},{"size":1139,"mtime":1608264208927,"results":"16","hashOfConfig":"11"},{"size":833,"mtime":1608268592451,"results":"17","hashOfConfig":"11"},{"size":3523,"mtime":1608636647438,"results":"18","hashOfConfig":"11"},{"size":13834,"mtime":1608636799768,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"87gq4i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\index.js",[],["44","45"],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\App.js",[],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\reportWebVitals.js",[],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostView.js",["46","47","48","49"],"import React, { Component } from 'react';\r\nimport NvmeHostOpt from './NvmeHostOpt';\r\nimport NvmeHostList from './NvmeHostList';\r\nimport NvmeHostTxtParse from './NvmeHostParse';\r\nimport NvmeHostTable from './NvmeHostTable';\r\n\r\nconst headerLine = \"------------------------------------------\";\r\nconst defaultViewHeaders = [\"BDF\", \"TYPE\", \"ADDR\", \"DATA\"];\r\nconst defaultViewItems = [\"REG\", \"A_INTA\", \"D_INTA\", \"MSIX\", \"MSI\", \"UNKN\"];\r\n\r\n// const descriptor = {};\r\n// const headers = [];\r\n// const items = [];\r\n\r\n\r\n\r\nclass NvmeHostView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.desc = {};\r\n        this.headers = [];\r\n        this.items = [];\r\n        this.state = {\r\n            descriptor: {},\r\n            headers: [],\r\n            items: [],\r\n            itemTypes: [],\r\n            opts: {\r\n                headers: defaultViewHeaders,\r\n                itemTypes: defaultViewItems,  // empty is all type\r\n            },\r\n\r\n            fileParsed: false,\r\n        };\r\n\r\n        this.optChanged = this.optChanged.bind(this);\r\n        // socket.on('ziga-guide', this.ziga_guide_recv.bind(this));\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <input type=\"file\" id=\"file-selector\" onChange={(ev) => {this.loadFile(ev.target.files)}}></input>\r\n            <div>{!this.state.fileParsed ? null :\r\n                <NvmeHostTable desc={this.desc} headers={this.headers} items={this.items}></NvmeHostTable>}\r\n            </div>\r\n        </div>;\r\n    \r\n    }\r\n\r\n    optChanged(field, subfield, val) {\r\n        let opts = {...this.state.opts};\r\n        let idx = opts[field].indexOf(subfield);\r\n        console.log(\"optChange\", this.state, field, subfield, val, opts, idx);\r\n        if (val && idx < 0) opts[field].push(subfield);\r\n        if (!val && idx >= 0) opts[field].splice(idx, 1);\r\n        this.setState({opts:opts});\r\n    }\r\n    \r\n    \r\n    loadFile(files) {\r\n        let fr = new FileReader();\r\n        fr.onload = () => {\r\n            const result = NvmeHostTxtParse(fr.result);\r\n            this.desc = result.desc;\r\n            this.headers = result.headers;\r\n            this.items = result.items;\r\n            this.setState({fileParsed: true});\r\n        }\r\n        fr.readAsText(files[0]);\r\n    }\r\n    \r\n    txtParse(txt) {\r\n        //console.log(\"_parse\", txt);\r\n        let lines = txt.split('\\n');\r\n        let curPos = \"init\";\r\n        let curName = \"\";\r\n        let curItem = null;\r\n        let headers = [];\r\n        let descriptor = {};\r\n        let items = [];\r\n        let itemTypes = [];\r\n        let itemIndex = 1;\r\n        let dataCnt = 0;\r\n        for (let linei=0; linei<lines.length; linei++) {\r\n            let line = lines[linei];\r\n            let data = line.split('|').map((v) => v.trim())\r\n            if (line.startsWith(headerLine)) {\r\n                switch (curPos) {\r\n                    case \"init\": curPos = \"descHeader\"; break;\r\n                    case \"descHeader\": curPos = \"desc\"; break;\r\n                    case \"desc\": curPos = \"preHeader\"; this.setState({descriptor:descriptor}); break;\r\n                    case \"preHeader\": curPos = \"header\"; break;\r\n                    case \"header\": curPos = \"body\"; this.setState({headers:headers.filter(v => v !== \"\")}); break;\r\n                    default: curPos = \"undef\";\r\n                };\r\n            } else {\r\n    \r\n                switch (curPos) {\r\n                    case \"desc\":\r\n                        if (data[1] === \"\") {\r\n                            descriptor[curName] += \" \" + data[2];\r\n                        } else {\r\n                            curName = data[1];\r\n                            descriptor[curName] = data[2];\r\n                        }\r\n                        break;\r\n    \r\n                    case \"header\":\r\n                        for (let hi=0; hi<data.length; hi++) {\r\n                            headers[hi] = (headers[hi] || \"\") + data[hi];\r\n                        }\r\n                        break;\r\n    \r\n                    case \"body\":\r\n                        if (line !== \"\") {\r\n                            let item = data.reduce((obj, val, i) => {obj[headers[i]] = val; return obj}, {});\r\n                            if (item.DATA.startsWith(\"----\")) {\r\n                                item.DATA = [item[\"CMD/REG_DATA\"]];\r\n                                item._DCNT_ = 1;\r\n                                // item.DATA = item[\"CMD/REG_DATA\"];\r\n                            } else {\r\n                                item.DATA = [item.DATA.split(\"-\")[1]];\r\n                                item._DCNT_ = 1;\r\n                                // item.DATA = item.DATA.split(\"-\")[1];\r\n                            }\r\n                            if (item.TYPE === \"\" && item.DATA.length > 0) {\r\n                            // if (item.TYPE === \"\" && item.DATA !== \"\") {\r\n                                curItem.DATA.push(item.DATA[0]);\r\n                                curItem._DCNT_++;\r\n                                // if (dataCnt == 8) { curItem.DATA = \"<div>\"+curItem.DATA+\"</div>\"; dataCnt = 0; }\r\n                                // dataCnt++;\r\n                                // curItem.DATA = item.DATA + \" \" + curItem.DATA;\r\n                                // console.log(curItem.DATA, dataCnt)\r\n                            } else {\r\n                                curItem = item;\r\n                                if (!itemTypes.includes(item.TYPE)) itemTypes.push(item.TYPE);\r\n                                items.push(item);\r\n                            }\r\n                        }\r\n                        break;\r\n    \r\n                    default:\r\n                        break;\r\n                }\r\n    \r\n    \r\n            }\r\n        }\r\n        \r\n\r\n        console.log(\"item\", items);\r\n        console.log(\"state\", this.state);\r\n        this.setState({items:items});\r\n        this.setState({itemTypes:itemTypes});\r\n    \r\n        console.log(\"state\", this.state);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default NvmeHostView;\r\n","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\test\\outrage.js",[],["50","51"],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostOpt.js",["52"],"import { Component } from \"react\";\r\n\r\n\r\nclass NvmeHostOpt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"NvmeHostOptCont\">\r\n            <div>\r\n                {this.props.headers.map((val, idx) => <label key={idx}>{val}\r\n                    <input type=\"checkbox\" value={val} \r\n                    checked={this.props.opts.headers.includes(val)}\r\n                    onChange={(ev) => this.props.optChanged(\"headers\", val, ev.target.checked)}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label>)}\r\n            </div>\r\n            <p></p>\r\n            <div>\r\n                {this.props.itemTypes.map((val, idx) => <label key={idx}>{val}\r\n                    <input type=\"checkbox\" value={val} \r\n                    checked={this.props.opts.itemTypes.includes(val)}\r\n                    onChange={(ev) => this.props.optChanged(\"itemTypes\", val, ev.target.checked)}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label>)}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default NvmeHostOpt;","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostList.js",["53"],"import { Component } from \"react\";\r\n\r\nclass NvmeHostList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <table className=\"NvmeHostList\">\r\n            <thead><tr>\r\n                {this.props.opts.headers.map(val => <th key={val}>{val}</th>)}\r\n            </tr></thead>\r\n            <tbody>\r\n                {this.props.items.map((item, idx) => {\r\n                    if (this.props.opts.itemTypes.includes(item.TYPE)) return <tr key={idx}>\r\n                        {this.props.opts.headers.map(val => <td key={val}>\r\n                            <div>{item[val]}</div>\r\n                        </td>)}\r\n                    </tr>;\r\n                    else return null;\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    }\r\n}\r\n\r\nexport default NvmeHostList;","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostParse.js",[],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostTable.js",["54","55","56","57","58","59","60","61"],"import React from 'react'\r\nimport styled from 'styled-components';\r\nimport { useTable, useFilters, useColumnOrder,\r\n         useBlockLayout, useResizeColumns } from 'react-table';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\n\r\nconst InitHiddenColumns = [\r\n    \"DEBUG ID\",\r\n    \"CMD/REG_DATA\",\r\n    \"MISC\",\r\n    \"CID\",\r\n    \"PSDT\",\r\n    \"PRP2/SGL1[39:32]\",\r\n    \"PRP1/SGL1[31:24]\",\r\n    \"STS/SLBA/PC\",\r\n    \"SQID\",\r\n    \"CQID\",\"START TIME\",\r\n    \"END TIME\"\r\n];\r\n\r\nconst initFilterableHeader = [\"BDF\", \"SRC\", \"RW\", \"TYPE\"];\r\n\r\nconst initColumnWidth = {\r\n    \"BDF\": 80,\r\n    \"SRC\": 60,\r\n    \"RW\": 60,\r\n    \"TYPE\": 85,\r\n    \"REG_NAME/QENTRY\": 100,\r\n    \"ADDR\": 180,\r\n    \"NSID\": 95,\r\n    \"DATA\": 140,\r\n    \"__default__\": 150,\r\n}\r\n\r\n// FIXME: should use raqndomize, current palete got from https://coolors.co/palettes/trending\r\nconst lightColors = [\"#FFBABA\", \"#FFDCB2\", \"#FDFFC3\", \"#D1FFC7\", \"#A9F8FF\", \"#AECDFF\", \"#C8BFFF\", \"#FFD0FF\", \"#FFFFFB\"];\r\n\r\nconst textColors = {\r\n    \"REG\": \"#e63946\",\r\n    \"__default__\": \"#14213d\",\r\n}\r\n\r\nconst Styles = styled.div`\r\n    padding: 1rem;\r\n\r\n    .table {\r\n        display: inline-block;\r\n        border-spacing: 0;\r\n        border: 1px solid black;\r\n\r\n        .tr {\r\n            :last-child {\r\n                .td {\r\n                    border-bottom: 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        .th {\r\n            word-break: break-word;\r\n        }\r\n\r\n        .th,\r\n        .td {\r\n            margin: 0;\r\n            padding: 0.5rem;\r\n            border-bottom: 1px solid black;\r\n            border-right: 1px solid black;\r\n            \r\n            ${'' /* In this example we use an absolutely position resizer, so this is required. */}\r\n            position: relative;\r\n            :last-child {\r\n                border-right: 0;\r\n            }\r\n            .resizer {\r\n                display: inline-block;\r\n                background: blue;\r\n                width: 10px;\r\n                height: 100%;\r\n                position: absolute;\r\n                right: 0;\r\n                top: 0;\r\n                transform: translateX(50%);\r\n                z-index: 1;\r\n                ${'' /* prevents from scrolling while dragging on touch devices */}\r\n                touch-action:none;\r\n\r\n                &.isResizing {\r\n                    background: red;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n// Define a default UI for filtering\r\nfunction DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n  }) {\r\n    const count = preFilteredRows.length\r\n  \r\n    return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n            setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            placeholder={`Search ${count} records...`}\r\n        />\r\n    )\r\n}\r\n  \r\n// This is a custom filter UI for selecting\r\n// a unique option from a list\r\nfunction SelectColumnFilter({\r\n    column: { filterValue, setFilter, preFilteredRows, id },\r\n}) {\r\n    // Calculate the options for filtering\r\n    // using the preFilteredRows\r\n    const options = React.useMemo(() => {\r\n        const options = new Set()\r\n        preFilteredRows.forEach(row => {\r\n            options.add(row.values[id])\r\n        })\r\n        const optVals = [...options.values()];\r\n        return {allOpt: optVals, filterOpt: optVals.reduce((obj,v) => (obj[v]=false, obj), {})}\r\n    }, [id, preFilteredRows])\r\n  \r\n    // Render a multi-select box\r\n    return (\r\n    //     <select\r\n    //         value={filterValue}\r\n    //         onChange={e => {\r\n    //             // setFilter(e.target.value || undefined)\r\n    //             setFilter([e.target.value, \"REG\"])\r\n    //         }}\r\n    //     >\r\n    //     <option value=\"\">All</option>\r\n    //     {options.map((option, i) => (\r\n    //       <option key={i} value={option}>\r\n    //         {option}\r\n    //       </option>\r\n    //     ))}\r\n    //   </select>\r\n\r\n        <div className=\"FilterGroup\">\r\n            {options.allOpt.map((option,i) => <label  key={i}>\r\n                <input type=\"checkbox\" value={option}\r\n                    checked={options.filterOpt[option]}\r\n                    onChange={e => {\r\n                        options.filterOpt[option] = e.target.checked;\r\n                        let filterValues = options.allOpt.reduce((arr,v) => {\r\n                            if (options.filterOpt[v]) arr.push(v);\r\n                            return arr;\r\n                        }, []);\r\n                        console.log(\"FF\", options, filterValues);\r\n                        setFilter(filterValues.length===0 ? undefined : filterValues);\r\n                    }}\r\n                ></input>{option}\r\n            </label>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction shuffle(arr) {\r\n    arr = [...arr]\r\n    const shuffled = []\r\n    while (arr.length) {\r\n        const rand = Math.floor(Math.random() * arr.length)\r\n        shuffled.push(arr.splice(rand, 1)[0])\r\n    }\r\n    return shuffled\r\n}\r\n\r\nfunction Table1({ columns, data }) {\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            // Let's set up our default Filter UI\r\n            Filter: DefaultColumnFilter,\r\n        }),\r\n        []\r\n    )\r\n  \r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        visibleColumns,\r\n        prepareRow,\r\n        allColumns,\r\n        setColumnOrder,\r\n        state,\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        initialState: {hiddenColumns: InitHiddenColumns}\r\n      },\r\n      useColumnOrder,\r\n      useFilters,\r\n    //   useSortBy\r\n    )\r\n  \r\n    const spring = React.useMemo(\r\n      () => ({\r\n        type: 'spring',\r\n        damping: 50,\r\n        stiffness: 100,\r\n      }),\r\n      []\r\n    )\r\n  \r\n    const randomizeColumns = () => {\r\n      setColumnOrder(shuffle(visibleColumns.map(d => d.id)))\r\n    }\r\n  \r\n    return (\r\n        <>\r\n            {/* <button onClick={() => randomizeColumns({})}>Randomize Columns</button> */}\r\n            <div className=\"globalOptions\">\r\n                {allColumns.map(column => <div key={column.id}>\r\n                    <label><input type=\"checkbox\" {...column.getToggleHiddenProps()}/>{column.id}</label>\r\n                </div>)}\r\n            </div>\r\n\r\n            <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map((headerGroup, i) => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                    {headerGroup.headers.map(column => (\r\n                    <motion.th\r\n                        {...column.getHeaderProps({\r\n                        layoutTransition: spring,\r\n                        style: {\r\n                            minWidth: column.minWidth,\r\n                        },\r\n                        })}\r\n                    >\r\n                        {/* <div {...column.getSortByToggleProps()}> */}\r\n                        {column.render('Header')}\r\n                        {/* <span>\r\n                            {column.isSorted\r\n                            ? column.isSortedDesc\r\n                                ? ' 🔽'\r\n                                : ' 🔼'\r\n                            : ''}\r\n                        </span> */}\r\n                        {/* </div> */}\r\n                        <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                    </motion.th>\r\n                    ))}\r\n                </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                <AnimatePresence>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row)\r\n                    return (\r\n                    <motion.tr\r\n                        {...row.getRowProps({\r\n                        layoutTransition: spring,\r\n                        exit: { opacity: 0, maxHeight: 0 },\r\n                        })}\r\n                    >\r\n                        {row.cells.map((cell, i) => {\r\n                        return (\r\n                            <motion.td\r\n                            {...cell.getCellProps({\r\n                                layoutTransition: spring,\r\n                            })}\r\n                            >\r\n                            {cell.render('Cell')}\r\n                            </motion.td>\r\n                        )\r\n                        })}\r\n                    </motion.tr>\r\n                    )\r\n                })}\r\n                </AnimatePresence>\r\n            </tbody>\r\n            </table>\r\n            <pre>\r\n            <code>{JSON.stringify(state, null, 2)}</code>\r\n            </pre>\r\n        </>\r\n    )\r\n}\r\n\r\n// Create a default prop getter\r\n// const defaultPropGetter = (...args) => {console.log(\"PropGet\", ...args); return {}};\r\nconst defaultPropGetter = () => ({});\r\n\r\n\r\nfunction Table({ columns, data,\r\n    // getColumnProps = (...args) => defaultPropGetter(\"Col\", ...args),\r\n    // getRowProps = (...args) => defaultPropGetter(\"Row\", ...args),\r\n    // getCellProps = (...args) => defaultPropGetter(\"Cell\", ...args),\r\n    getColumnProps = defaultPropGetter,\r\n    getRowProps = defaultPropGetter,\r\n    getCellProps = defaultPropGetter,\r\n}) {\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            minWidth: 30,\r\n            width: 150,\r\n            maxWidth: 400,\r\n            Filter: DefaultColumnFilter, // Default Filter\r\n        }),\r\n        []\r\n    )\r\n  \r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        visibleColumns,\r\n        prepareRow,\r\n        allColumns,\r\n        setColumnOrder,\r\n        state,\r\n        resetResizing,\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            initialState: {hiddenColumns: InitHiddenColumns},\r\n        },\r\n        useColumnOrder,\r\n        useFilters,\r\n        useBlockLayout,\r\n        useResizeColumns\r\n    )\r\n  \r\n    return (\r\n        <>\r\n            <div className=\"globalOptions\">\r\n                {allColumns.map(column => <div key={column.id}>\r\n                    <label><input type=\"checkbox\" {...column.getToggleHiddenProps()}/>{column.id}</label>\r\n                </div>)}\r\n            </div>\r\n\r\n            <button onClick={resetResizing}>Reset Resizing</button>\r\n            <div>\r\n            <div {...getTableProps()} className=\"table\">\r\n                <div>\r\n                {headerGroups.map(headerGroup => (\r\n                    <div {...headerGroup.getHeaderGroupProps()} className=\"tr\">\r\n                    {headerGroup.headers.map(column => (\r\n                        <div {...column.getHeaderProps()} className=\"th\">\r\n                            {column.render('Header')}\r\n                            <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                            {/* Use column.getResizerProps to hook up the events correctly */}\r\n                            <div\r\n                                {...column.getResizerProps()}\r\n                                className={`resizer ${\r\n                                column.isResizing ? 'isResizing' : ''\r\n                                }`}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                    </div>\r\n                ))}\r\n                </div>\r\n    \r\n                <div {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row)\r\n                    return (\r\n                    <div {...row.getRowProps(getRowProps(row))} className=\"tr\">\r\n                        {row.cells.map(cell => {\r\n                        return (\r\n                            <div {...cell.getCellProps([\r\n                                {\r\n                                  className: cell.column.className,\r\n                                  style: cell.column.style,\r\n                                },\r\n                                getColumnProps(cell.column),\r\n                                getCellProps(cell),\r\n                              ])} className=\"td\">\r\n                            {cell.render('Cell')}\r\n                            </div>\r\n                        )\r\n                        })}\r\n                    </div>\r\n                    )\r\n                })}\r\n                </div>\r\n            </div>\r\n            </div>\r\n            <pre>\r\n            <code>{JSON.stringify(state, null, 2)}</code>\r\n            </pre>\r\n        </>\r\n    )\r\n}\r\n\r\nconst NvmeHostTable = ({desc, headers, items}) => {\r\n    const [filterableHeader, setFilterHeader] = React.useState(headers.reduce((obj, val) => {\r\n        obj[val] = initFilterableHeader.includes(val);\r\n        return obj;\r\n    }, {}));\r\n\r\n    const columns = React.useMemo(() => headers.map(val => {\r\n        return {\r\n            Header: val,\r\n            accessor: val,\r\n            Filter: SelectColumnFilter,\r\n            filter: 'includesSome',\r\n            disableFilters: !filterableHeader[val],\r\n            width: (val in initColumnWidth) ? initColumnWidth[val] : initColumnWidth[\"__default__\"],\r\n        }\r\n    }), [filterableHeader]);\r\n\r\n    const data = React.useMemo(() => items, []);\r\n\r\n    const uDbf = new Set();\r\n    const bgrColor = {};\r\n    for (let item of items) uDbf.add(item[\"BDF\"]);\r\n    uDbf.forEach((bdf,i) => bgrColor[bdf] = lightColors[i%lightColors.length]);\r\n\r\n    return <Styles>\r\n        <Table columns={columns} data={data}\r\n            getRowProps={(row) => ({\r\n                style: {\r\n                    background: bgrColor[row.values[\"BDF\"]],\r\n                    color: textColors[row.values[\"TYPE\"]] || textColors[\"__default__\"],\r\n                }\r\n            })}\r\n        ></Table>\r\n    </Styles>\r\n}\r\n\r\nexport default NvmeHostTable;",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":2,"column":8,"nodeType":"68","messageId":"69","endLine":2,"endColumn":19},{"ruleId":"66","severity":1,"message":"70","line":3,"column":8,"nodeType":"68","messageId":"69","endLine":3,"endColumn":20},{"ruleId":"66","severity":1,"message":"71","line":83,"column":13,"nodeType":"68","messageId":"69","endLine":83,"endColumn":22},{"ruleId":"66","severity":1,"message":"72","line":84,"column":13,"nodeType":"68","messageId":"69","endLine":84,"endColumn":20},{"ruleId":"62","replacedBy":"73"},{"ruleId":"64","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":5,"column":5,"nodeType":"77","messageId":"78","endLine":7,"endColumn":6},{"ruleId":"75","severity":1,"message":"76","line":4,"column":5,"nodeType":"77","messageId":"78","endLine":6,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":126,"column":84,"nodeType":"81","messageId":"82","endLine":126,"endColumn":85},{"ruleId":"66","severity":1,"message":"83","line":175,"column":10,"nodeType":"68","messageId":"69","endLine":175,"endColumn":16},{"ruleId":"66","severity":1,"message":"84","line":215,"column":11,"nodeType":"68","messageId":"69","endLine":215,"endColumn":27},{"ruleId":"66","severity":1,"message":"85","line":320,"column":9,"nodeType":"68","messageId":"69","endLine":320,"endColumn":23},{"ruleId":"66","severity":1,"message":"86","line":323,"column":9,"nodeType":"68","messageId":"69","endLine":323,"endColumn":23},{"ruleId":"66","severity":1,"message":"87","line":403,"column":30,"nodeType":"68","messageId":"69","endLine":403,"endColumn":45},{"ruleId":"88","severity":1,"message":"89","line":417,"column":9,"nodeType":"90","endLine":417,"endColumn":27,"suggestions":"91"},{"ruleId":"88","severity":1,"message":"92","line":419,"column":45,"nodeType":"90","endLine":419,"endColumn":47,"suggestions":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'NvmeHostOpt' is defined but never used.","Identifier","unusedVar","'NvmeHostList' is defined but never used.","'itemIndex' is assigned a value but never used.","'dataCnt' is assigned a value but never used.",["94"],["95"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Table1' is defined but never used.","'randomizeColumns' is assigned a value but never used.","'visibleColumns' is assigned a value but never used.","'setColumnOrder' is assigned a value but never used.","'setFilterHeader' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has a missing dependency: 'headers'. Either include it or remove the dependency array.","ArrayExpression",["96"],"React Hook React.useMemo has a missing dependency: 'items'. Either include it or remove the dependency array.",["97"],"no-global-assign","no-unsafe-negation",{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},"Update the dependencies array to be: [filterableHeader, headers]",{"range":"102","text":"103"},"Update the dependencies array to be: [items]",{"range":"104","text":"105"},[13178,13196],"[filterableHeader, headers]",[13246,13248],"[items]"]