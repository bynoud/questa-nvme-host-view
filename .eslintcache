[{"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\index.js":"1","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\App.js":"2","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\reportWebVitals.js":"3","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostView.js":"4","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\test\\outrage.js":"5","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostOpt.js":"6","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostList.js":"7","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostParse.js":"8","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostTable.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":194,"mtime":1608260075496,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":6009,"mtime":1608284985468,"results":"14","hashOfConfig":"11"},{"size":4322,"mtime":1607829477648,"results":"15","hashOfConfig":"11"},{"size":1139,"mtime":1608264208927,"results":"16","hashOfConfig":"11"},{"size":833,"mtime":1608268592451,"results":"17","hashOfConfig":"11"},{"size":3321,"mtime":1608285589059,"results":"18","hashOfConfig":"11"},{"size":7937,"mtime":1608537785682,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"87gq4i",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\index.js",[],["43","44"],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\App.js",[],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\reportWebVitals.js",[],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostView.js",["45","46","47","48"],"import React, { Component } from 'react';\r\nimport NvmeHostOpt from './NvmeHostOpt';\r\nimport NvmeHostList from './NvmeHostList';\r\nimport NvmeHostTxtParse from './NvmeHostParse';\r\nimport NvmeHostTable from './NvmeHostTable';\r\n\r\nconst headerLine = \"------------------------------------------\";\r\nconst defaultViewHeaders = [\"BDF\", \"TYPE\", \"ADDR\", \"DATA\"];\r\nconst defaultViewItems = [\"REG\", \"A_INTA\", \"D_INTA\", \"MSIX\", \"MSI\", \"UNKN\"];\r\n\r\n// const descriptor = {};\r\n// const headers = [];\r\n// const items = [];\r\n\r\n\r\n\r\nclass NvmeHostView extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.desc = {};\r\n        this.headers = [];\r\n        this.items = [];\r\n        this.state = {\r\n            descriptor: {},\r\n            headers: [],\r\n            items: [],\r\n            itemTypes: [],\r\n            opts: {\r\n                headers: defaultViewHeaders,\r\n                itemTypes: defaultViewItems,  // empty is all type\r\n            },\r\n\r\n            fileParsed: false,\r\n        };\r\n\r\n        this.optChanged = this.optChanged.bind(this);\r\n        // socket.on('ziga-guide', this.ziga_guide_recv.bind(this));\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <input type=\"file\" id=\"file-selector\" onChange={(ev) => {this.loadFile(ev.target.files)}}></input>\r\n            <div>{!this.state.fileParsed ? null :\r\n                <NvmeHostTable desc={this.desc} headers={this.headers} items={this.items}></NvmeHostTable>}\r\n            </div>\r\n        </div>;\r\n    \r\n    }\r\n\r\n    optChanged(field, subfield, val) {\r\n        let opts = {...this.state.opts};\r\n        let idx = opts[field].indexOf(subfield);\r\n        console.log(\"optChange\", this.state, field, subfield, val, opts, idx);\r\n        if (val && idx < 0) opts[field].push(subfield);\r\n        if (!val && idx >= 0) opts[field].splice(idx, 1);\r\n        this.setState({opts:opts});\r\n    }\r\n    \r\n    \r\n    loadFile(files) {\r\n        let fr = new FileReader();\r\n        fr.onload = () => {\r\n            const result = NvmeHostTxtParse(fr.result);\r\n            this.desc = result.desc;\r\n            this.headers = result.headers;\r\n            this.items = result.items;\r\n            this.setState({fileParsed: true});\r\n        }\r\n        fr.readAsText(files[0]);\r\n    }\r\n    \r\n    txtParse(txt) {\r\n        //console.log(\"_parse\", txt);\r\n        let lines = txt.split('\\n');\r\n        let curPos = \"init\";\r\n        let curName = \"\";\r\n        let curItem = null;\r\n        let headers = [];\r\n        let descriptor = {};\r\n        let items = [];\r\n        let itemTypes = [];\r\n        let itemIndex = 1;\r\n        let dataCnt = 0;\r\n        for (let linei=0; linei<lines.length; linei++) {\r\n            let line = lines[linei];\r\n            let data = line.split('|').map((v) => v.trim())\r\n            if (line.startsWith(headerLine)) {\r\n                switch (curPos) {\r\n                    case \"init\": curPos = \"descHeader\"; break;\r\n                    case \"descHeader\": curPos = \"desc\"; break;\r\n                    case \"desc\": curPos = \"preHeader\"; this.setState({descriptor:descriptor}); break;\r\n                    case \"preHeader\": curPos = \"header\"; break;\r\n                    case \"header\": curPos = \"body\"; this.setState({headers:headers.filter(v => v !== \"\")}); break;\r\n                    default: curPos = \"undef\";\r\n                };\r\n            } else {\r\n    \r\n                switch (curPos) {\r\n                    case \"desc\":\r\n                        if (data[1] === \"\") {\r\n                            descriptor[curName] += \" \" + data[2];\r\n                        } else {\r\n                            curName = data[1];\r\n                            descriptor[curName] = data[2];\r\n                        }\r\n                        break;\r\n    \r\n                    case \"header\":\r\n                        for (let hi=0; hi<data.length; hi++) {\r\n                            headers[hi] = (headers[hi] || \"\") + data[hi];\r\n                        }\r\n                        break;\r\n    \r\n                    case \"body\":\r\n                        if (line !== \"\") {\r\n                            let item = data.reduce((obj, val, i) => {obj[headers[i]] = val; return obj}, {});\r\n                            if (item.DATA.startsWith(\"----\")) {\r\n                                item.DATA = [item[\"CMD/REG_DATA\"]];\r\n                                item._DCNT_ = 1;\r\n                                // item.DATA = item[\"CMD/REG_DATA\"];\r\n                            } else {\r\n                                item.DATA = [item.DATA.split(\"-\")[1]];\r\n                                item._DCNT_ = 1;\r\n                                // item.DATA = item.DATA.split(\"-\")[1];\r\n                            }\r\n                            if (item.TYPE === \"\" && item.DATA.length > 0) {\r\n                            // if (item.TYPE === \"\" && item.DATA !== \"\") {\r\n                                curItem.DATA.push(item.DATA[0]);\r\n                                curItem._DCNT_++;\r\n                                // if (dataCnt == 8) { curItem.DATA = \"<div>\"+curItem.DATA+\"</div>\"; dataCnt = 0; }\r\n                                // dataCnt++;\r\n                                // curItem.DATA = item.DATA + \" \" + curItem.DATA;\r\n                                // console.log(curItem.DATA, dataCnt)\r\n                            } else {\r\n                                curItem = item;\r\n                                if (!itemTypes.includes(item.TYPE)) itemTypes.push(item.TYPE);\r\n                                items.push(item);\r\n                            }\r\n                        }\r\n                        break;\r\n    \r\n                    default:\r\n                        break;\r\n                }\r\n    \r\n    \r\n            }\r\n        }\r\n        \r\n\r\n        console.log(\"item\", items);\r\n        console.log(\"state\", this.state);\r\n        this.setState({items:items});\r\n        this.setState({itemTypes:itemTypes});\r\n    \r\n        console.log(\"state\", this.state);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default NvmeHostView;\r\n","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\test\\outrage.js",[],["49","50"],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostOpt.js",["51"],"import { Component } from \"react\";\r\n\r\n\r\nclass NvmeHostOpt extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"NvmeHostOptCont\">\r\n            <div>\r\n                {this.props.headers.map((val, idx) => <label key={idx}>{val}\r\n                    <input type=\"checkbox\" value={val} \r\n                    checked={this.props.opts.headers.includes(val)}\r\n                    onChange={(ev) => this.props.optChanged(\"headers\", val, ev.target.checked)}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label>)}\r\n            </div>\r\n            <p></p>\r\n            <div>\r\n                {this.props.itemTypes.map((val, idx) => <label key={idx}>{val}\r\n                    <input type=\"checkbox\" value={val} \r\n                    checked={this.props.opts.itemTypes.includes(val)}\r\n                    onChange={(ev) => this.props.optChanged(\"itemTypes\", val, ev.target.checked)}/>\r\n                    <span className=\"checkmark\"></span>\r\n                </label>)}\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default NvmeHostOpt;","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostList.js",["52"],"import { Component } from \"react\";\r\n\r\nclass NvmeHostList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return <table className=\"NvmeHostList\">\r\n            <thead><tr>\r\n                {this.props.opts.headers.map(val => <th key={val}>{val}</th>)}\r\n            </tr></thead>\r\n            <tbody>\r\n                {this.props.items.map((item, idx) => {\r\n                    if (this.props.opts.itemTypes.includes(item.TYPE)) return <tr key={idx}>\r\n                        {this.props.opts.headers.map(val => <td key={val}>\r\n                            <div>{item[val]}</div>\r\n                        </td>)}\r\n                    </tr>;\r\n                    else return null;\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    }\r\n}\r\n\r\nexport default NvmeHostList;","C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostParse.js",["53"],"C:\\MYDATA_DONTSYNC\\react\\nvme-qvip-view\\src\\qvip\\nvme-host\\NvmeHostTable.js",["54","55","56","57","58","59"],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":2,"column":8,"nodeType":"66","messageId":"67","endLine":2,"endColumn":19},{"ruleId":"64","severity":1,"message":"68","line":3,"column":8,"nodeType":"66","messageId":"67","endLine":3,"endColumn":20},{"ruleId":"64","severity":1,"message":"69","line":83,"column":13,"nodeType":"66","messageId":"67","endLine":83,"endColumn":22},{"ruleId":"64","severity":1,"message":"70","line":84,"column":13,"nodeType":"66","messageId":"67","endLine":84,"endColumn":20},{"ruleId":"60","replacedBy":"71"},{"ruleId":"62","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":5,"column":5,"nodeType":"75","messageId":"76","endLine":7,"endColumn":6},{"ruleId":"73","severity":1,"message":"74","line":4,"column":5,"nodeType":"75","messageId":"76","endLine":6,"endColumn":6},{"ruleId":"77","severity":1,"message":"78","line":47,"column":48,"nodeType":"79","messageId":"80","endLine":47,"endColumn":100},{"ruleId":"81","severity":1,"message":"82","line":76,"column":84,"nodeType":"83","messageId":"84","endLine":76,"endColumn":85},{"ruleId":"85","severity":1,"message":"86","line":107,"column":54,"nodeType":"87","messageId":"88","endLine":107,"endColumn":56},{"ruleId":"64","severity":1,"message":"89","line":165,"column":11,"nodeType":"66","messageId":"67","endLine":165,"endColumn":27},{"ruleId":"64","severity":1,"message":"90","line":245,"column":30,"nodeType":"66","messageId":"67","endLine":245,"endColumn":45},{"ruleId":"91","severity":1,"message":"92","line":258,"column":9,"nodeType":"93","endLine":258,"endColumn":11,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":260,"column":45,"nodeType":"93","endLine":260,"endColumn":47,"suggestions":"96"},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'NvmeHostOpt' is defined but never used.","Identifier","unusedVar","'NvmeHostList' is defined but never used.","'itemIndex' is assigned a value but never used.","'dataCnt' is assigned a value but never used.",["97"],["98"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'headers'.","ArrowFunctionExpression","unsafeRefs","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'randomizeColumns' is assigned a value but never used.","'setFilterHeader' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useMemo has missing dependencies: 'filterableHeader' and 'headers'. Either include them or remove the dependency array.","ArrayExpression",["99"],"React Hook React.useMemo has a missing dependency: 'items'. Either include it or remove the dependency array.",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [filterableHeader, headers]",{"range":"105","text":"106"},"Update the dependencies array to be: [items]",{"range":"107","text":"108"},[7748,7750],"[filterableHeader, headers]",[7800,7802],"[items]"]